#include<iostream>
#include<vector>
using namespace std;

class heap {
public:
	heap():_vec() {}
	heap(vector<int>& vec)
	{
		_vec.push_back(0);
		for (int i = 0; i < vec.size(); i++)
		{
			_vec.push_back(vec[i]);
		}
	}

	void push(int t)
	{
		_vec.push_back(t);
		up(_vec.size()-1);
	}
	void pop()
	{
		if (_vec.size() <=1 )return;
		swap(_vec[1], _vec[_vec.size()-1]);
		down(1);
		_vec.pop_back();
	}
	void make()
	{
		for (int i = _vec.size()-1; i >= 1; i--)
		{
			down(i);
		}
	}
	int operator[](int i)
	{
		if (i >= _vec.size())return -1;
		return _vec[i];
	}
	friend ostream& operator<<(ostream& os,heap& h)
	{
		if (h._vec.size() < 1)return os;
		for (int i = 1; i < h._vec.size(); i++)
		{
			os << h._vec[i]<<" ";
		}
		os << endl;
		return os;
	}
private:
	vector<int> _vec;

	void up(int i)
	{
		if (i >= _vec.size())return;
		while (i != 1)
		{
			if (_vec[i] < _vec[i / 2])
			{
				swap(_vec[i], _vec[i / 2]);
				i = i / 2;
			}
			else {
				break;
			}
		}
	}
	void down(int i)
	{
		if (i >= _vec.size())return;
		while (i*2 < _vec.size())
		{
			if (_vec[i] > _vec[i * 2])
			{
				swap(_vec[i], _vec[i * 2]);
				i *= 2;
			}
			else if (i * 2 + 1 < _vec.size() && _vec[i] > _vec[i * 2 + 1])
			{
				swap(_vec[i], _vec[i * 2 + 1]);
				i = i * 2 + 1;
			}
			else {
				break;
			}
		}
	}
	
};

int main()
{
	heap h;
	for (int i = 10; i >0; i--)
	{
		h.push(i);
	}
	cout << h;
	vector<int> a{ 2, 5, 6, 4, 8, 7, 9 };
	heap t(a);
	t.make();
	cout << t;
}
